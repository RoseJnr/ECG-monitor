{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SocketioService from './services/socketio.service.js';\nimport RealtimeChart from './components/RealtimeChart.vue';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement } from 'chart.js';\nexport default {\n  name: 'App',\n  components: {\n    RealtimeChart\n  },\n  data() {\n    return {\n      datacollection: {\n        labels: [],\n        datasets: [{\n          label: 'ESP32 Data',\n          backgroundColor: '#f87979',\n          borderColor: '#f87979',\n          data: []\n        }]\n      }\n    };\n  },\n  created() {\n    ChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement);\n    SocketioService.setupSocketConnection();\n    SocketioService.socket.on('connect', () => {\n      console.log('Connected to server');\n    });\n    SocketioService.socket.on('esp32-data', data => {\n      console.log('Data received from ESP32:', data);\n      this.updateChartData(data);\n    });\n    SocketioService.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n    });\n  },\n  methods: {\n    updateChartData(data) {\n      if (this.datacollection) {\n        this.datacollection.labels.push(new Date(data.timestamp).toLocaleTimeString());\n        this.datacollection.datasets[0].data.push(data.value);\n\n        // Keep only the last 20 points in the chart to keep it readable\n        if (this.datacollection.labels.length > 200) {\n          this.datacollection.labels.shift();\n          this.datacollection.datasets[0].data.shift();\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["SocketioService","RealtimeChart","Chart","ChartJS","Title","Tooltip","Legend","LineElement","CategoryScale","LinearScale","PointElement","name","components","data","datacollection","labels","datasets","label","backgroundColor","borderColor","created","register","setupSocketConnection","socket","on","console","log","updateChartData","methods","push","Date","timestamp","toLocaleTimeString","value","length","shift"],"sources":["C:\\Users\\roose\\Documents\\TCC\\ServerVue\\socketio-vue\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <RealtimeChart :chartData=\"datacollection\"></RealtimeChart>\n  </div>\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\nimport RealtimeChart from './components/RealtimeChart.vue';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement } from 'chart.js';\n\nexport default {\n  name: 'App',\n  components: {\n    RealtimeChart\n  },\n  data() {\n    return {\n      datacollection: {\n        labels: [],\n        datasets: [\n          {\n            label: 'ESP32 Data',\n            backgroundColor: '#f87979',\n            borderColor: '#f87979',\n            data: []\n          }\n        ]\n      }\n    };\n  },\n  created() {\n    ChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement);\n    SocketioService.setupSocketConnection();\n\n    SocketioService.socket.on('connect', () => {\n      console.log('Connected to server');\n    });\n\n    SocketioService.socket.on('esp32-data', (data) => {\n      console.log('Data received from ESP32:', data);\n      this.updateChartData(data);\n    });\n\n    SocketioService.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n    });\n  },\n  methods: {\n    updateChartData(data) {\n      if (this.datacollection) {\n        this.datacollection.labels.push(new Date(data.timestamp).toLocaleTimeString());\n        this.datacollection.datasets[0].data.push(data.value);\n\n        // Keep only the last 20 points in the chart to keep it readable\n        if (this.datacollection.labels.length > 200) {\n          this.datacollection.labels.shift();\n          this.datacollection.datasets[0].data.shift();\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";AAOA,OAAOA,eAAc,MAAO,gCAAgC;AAC5D,OAAOC,aAAY,MAAO,gCAAgC;AAC1D,SAASC,KAAI,IAAKC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAW,QAAS,UAAU;AAE1H,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVX;EACF,CAAC;EACDY,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE;QACdC,MAAM,EAAE,EAAE;QACVC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,YAAY;UACnBC,eAAe,EAAE,SAAS;UAC1BC,WAAW,EAAE,SAAS;UACtBN,IAAI,EAAE;QACR;MAEJ;IACF,CAAC;EACH,CAAC;EACDO,OAAOA,CAAA,EAAG;IACRjB,OAAO,CAACkB,QAAQ,CAACjB,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,CAAC;IAC/FV,eAAe,CAACsB,qBAAqB,CAAC,CAAC;IAEvCtB,eAAe,CAACuB,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;MACzCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;IAEF1B,eAAe,CAACuB,MAAM,CAACC,EAAE,CAAC,YAAY,EAAGX,IAAI,IAAK;MAChDY,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEb,IAAI,CAAC;MAC9C,IAAI,CAACc,eAAe,CAACd,IAAI,CAAC;IAC5B,CAAC,CAAC;IAEFb,eAAe,CAACuB,MAAM,CAACC,EAAE,CAAC,YAAY,EAAE,MAAM;MAC5CC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;EACDE,OAAO,EAAE;IACPD,eAAeA,CAACd,IAAI,EAAE;MACpB,IAAI,IAAI,CAACC,cAAc,EAAE;QACvB,IAAI,CAACA,cAAc,CAACC,MAAM,CAACc,IAAI,CAAC,IAAIC,IAAI,CAACjB,IAAI,CAACkB,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;QAC9E,IAAI,CAAClB,cAAc,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAI,CAACgB,IAAI,CAAChB,IAAI,CAACoB,KAAK,CAAC;;QAErD;QACA,IAAI,IAAI,CAACnB,cAAc,CAACC,MAAM,CAACmB,MAAK,GAAI,GAAG,EAAE;UAC3C,IAAI,CAACpB,cAAc,CAACC,MAAM,CAACoB,KAAK,CAAC,CAAC;UAClC,IAAI,CAACrB,cAAc,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAI,CAACsB,KAAK,CAAC,CAAC;QAC9C;MACF;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}