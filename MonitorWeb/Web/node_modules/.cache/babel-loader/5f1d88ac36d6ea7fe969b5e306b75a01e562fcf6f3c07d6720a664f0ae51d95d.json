{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from './assets/logo.png';\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"img\", {\n  alt: \"Vue logo\",\n  src: _imports_0\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ECGChart = _resolveComponent(\"ECGChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_ECGChart, {\n    \"chart-data\": $data.datacollection\n  }, null, 8 /* PROPS */, [\"chart-data\"]), _createCommentVNode(\" <div v-if=\\\"ecgData\\\">\\n      <h2>Data from ESP32:</h2>\\n      <p>Timestamp: {{ ecgData.timestamp }}</p>\\n      <p>Value: {{ ecgData.value }}</p>\\n    </div> \")]);\n}","map":{"version":3,"names":["_imports_0","id","_createElementVNode","alt","src","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_ECGChart","$data","datacollection","_createCommentVNode"],"sources":["C:\\Users\\roose\\Documents\\TCC\\ServerVue\\socketio-vue\\src\\App.vue"],"sourcesContent":["<!-- src/App.vue -->\n<template>\n  <div id=\"app\">\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <ECGChart :chart-data=\"datacollection\"></ECGChart>\n    <!-- <div v-if=\"ecgData\">\n      <h2>Data from ESP32:</h2>\n      <p>Timestamp: {{ ecgData.timestamp }}</p>\n      <p>Value: {{ ecgData.value }}</p>\n    </div> -->\n  </div>\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\nimport ECGChart from './components/ECGChart.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    ECGChart\n  },\n  data() {\n    return {\n      ecgData: null,\n      datacollection: {\n        labels: [],\n        datasets: [\n          {\n            label: 'ECG Data',\n            backgroundColor: '#f87979',\n            data: []\n          }\n        ]\n      }\n    };\n  },\n  created() {\n    SocketioService.setupSocketConnection();\n    SocketioService.socket.on('ecg-data', (data) => {\n      console.log('Data received from ESP32:', data); // Adicione esta linha\n      this.esp32Data = data;\n    });\n  },\n  methods: {\n    updateChartData(data) {\n      this.datacollection.labels.push(new Date(data.timestamp).toLocaleTimeString());\n      this.datacollection.datasets[0].data.push(data.value);\n\n      // Manter apenas os últimos 20 pontos no gráfico para mantê-lo legível\n      if (this.datacollection.labels.length > 20) {\n        this.datacollection.labels.shift();\n        this.datacollection.datasets[0].data.shift();\n      }\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";OAGwBA,UAAuB;;EADxCC,EAAE,EAAC;AAAK;gCACXC,mBAAA,CAA4C;EAAvCC,GAAG,EAAC,UAAU;EAACC,GAAuB,EAAvBJ;;;;uBADtBK,mBAAA,CAQM,OARNC,UAQM,GAPJC,UAA4C,EAC5CC,YAAA,CAAkDC,mBAAA;IAAvC,YAAU,EAAEC,KAAA,CAAAC;EAAc,yCACrCC,mBAAA,mKAIU,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}