{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_RealtimeChart = _resolveComponent(\"RealtimeChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_RealtimeChart, {\n    data: $data.datacollection\n  }, null, 8 /* PROPS */, [\"data\"])]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createVNode","_component_RealtimeChart","data","$data","datacollection"],"sources":["C:\\Users\\roose\\Documents\\TCC\\ServerVue\\socketio-vue\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <RealtimeChart :data=\"datacollection\"></RealtimeChart>\n  </div>\n</template>\n\n<script>\nimport SocketioService from './services/socketio.service.js';\nimport RealtimeChart from './components/RealtimeChart.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    RealtimeChart\n  },\n  data() {\n    return {\n      datacollection: {\n        labels: [],\n        datasets: [\n          {\n            label: 'ESP32 Data',\n            backgroundColor: '#f87979',\n            borderColor: '#f87979',\n            data: []\n          }\n        ]\n      }\n    };\n  },\n  created() {\n    SocketioService.setupSocketConnection();\n\n    SocketioService.socket.on('connect', () => {\n      console.log('Connected to server');\n    });\n\n    SocketioService.socket.on('ecg-data', (data) => {\n      console.log('Data received from ESP32:', data);\n      this.updateChartData(data);\n    });\n\n    SocketioService.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n    });\n  },\n  methods: {\n    updateChartData(data) {\n      if (this.datacollection) {\n        this.datacollection.labels.push(new Date(data.timestamp).toLocaleTimeString());\n        this.datacollection.datasets[0].data.push(data.value);\n\n        // Keep only the last 20 points in the chart to keep it readable\n        if (this.datacollection.labels.length > 20) {\n          this.datacollection.labels.shift();\n          this.datacollection.datasets[0].data.shift();\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;uBAAbC,mBAAA,CAEM,OAFNC,UAEM,GADJC,YAAA,CAAsDC,wBAAA;IAAtCC,IAAI,EAAEC,KAAA,CAAAC;EAAc,kC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}